1

AGRISPHERE
A PROJECT REPORT
Submitted by
Chittuluri Naveen – B211515
Nelluri Dolendra Sai Teja – B210212

Of
Bachelor of Technology
Under the guidance of

Mr. Rahul (M.Tech)
Asst.Professor

DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
RAJIV GANDHI UNIVERSITY OF KNOWLEDGE TECHNOLOGIES
BASAR, NIRMAL (DIST.),
TELANGANA – 504107

DEPARTMENT OF CSE RGUKT

2

AGRISPHERE

Project Report submitted to
Rajiv Gandhi University of Knowledge Technologies, Basar
for the partial fulfillment of the requirements
for the award of the degree of

Bachelor of Technology
in
Computer Science & Engineering
by

Chittuluri Naveen – B211515
Nelluri Dolendra Sai Teja – B210212
Under the Guidance of

Mr.Rahul
Assistant Professor

DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
RAJIV GANDHI UNIVERSITY OF KNOWLEDGE TECHNOLOGIES
BASAR, NIRMAL (DIST)
OCTOBER 2025
DEPARTMENT OF CSE RGUKT

3

DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
RAJIV GANDHI UNIVERSITY OF KNOWLEDGE TECHNOLOGIES,
BASAR
CERTIFICATE
This is to certify that the Project Report entitled AGRISPHERE submitted by
Chittuluri Naveen ( B211515 ) and Nelluri Dolendra Sai Teja ( B210212 ), is a
bonafide record of the work and investigations carried out by them under my
supervision and guidance. The report has been submitted in partial
fulfillment of the requirements for the degree of Bachelor of Technology in
Computer Science and Engineering at Rajiv Gandhi University of Knowledge
Technologies, Basar .

PROJECT SUPERVISOR

HEAD OF DEPARTMENT

Mr.RAHUL
Assistant Professor

Mr.VENKATA RAMANA
Assistant Professor

EXTERNAL EXAMINER

DEPARTMENT OF CSE RGUKT

4

DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
RAJIV GANDHI UNIVERSITY OF KNOWLEDGE TECHNOLOGIES,
BASAR
DECLARATION
I/We hereby declare that the work which is being presented in this project entitled,
AGRISPHERE submitted to RAJIV GANDHI UNIVERSITY OF KNOWLEDGE
TECHNOLOGIES, BASAR in the partial fulfillment of the requirements for the
award of the degree of BACHELOR OF TECHNOLOGY in COMPUTER
SCIENCE AND ENGINEERING, is an authentic record of my/our own work
carried out under the supervision of Mr.RAHUL , Assistant Professor in Department
of Computer Science and Engineering , RGUKT-Basar.
The matter embodied in this project report has not been submitted by me/us for the
award of any other degree .

Place : Basar
Date : 24-10-2025

DEPARTMENT OF CSE RGUKT

Name of the Student – ID No
Chittuluri Naveen - B211515
Nelluri Dolendra Sai Teja - B210212

5

ACKNOWLEDGEMENT
We express our sincere gratitude to Rajiv Gandhi University of Knowledge
Technologies, Basar for providing the opportunity and resources to carry out
this project.We are thankful to our project supervisor, Mr.RAHUL, for his
valuable guidance,constructive feedback, and continuous support throughout
this project.
Our thanks also extend to the Head of the Department, Mr. VENKAT
RAMANA,and all faculty members of the Department of Computer Science
and Engineering for their encouragement and assistance.
Finally, we would like to thank our family and friends for their unwavering
support and motivation during this endeavor.
Chittuluri Naveen – B211515
Nelluri Dolendra Sai Teja - B210212

DEPARTMENT OF CSE RGUKT

6

ABSTRACT
In recent years, the agricultural sector has witnessed a significant transformation
driven by advancements in digital technologies and artificial intelligence. Despite
this progress, farmers, especially in rural areas, still face challenges in accessing
timely information, government schemes, weather forecasts, and market prices due
to the lack of user-friendly digital tools. The AgriSphere platform is developed as an
intelligent, multilingual, and voice-interactive web-based system aimed at
empowering farmers through digital connectivity, accessibility, and automation.
AgriSphere integrates multiple agricultural resources under a single unified
interface. The system utilizes React.js for the frontend, Firebase for secure
authentication and cloud-based real-time database management, and Google Speech
& Translation APIs for multilingual communication and speech recognition. Farmers
can interact with the platform using natural voice commands in their preferred
languages such as Telugu or English. Through this, they can access live weather
forecasts, mandi price updates, financial ledger details, cooperative sales tracking,
and government scheme information in an intuitive and personalized manner.
The application features separate administrative and user roles to maintain data
integrity and control. Administrators can add, update, or delete schemes, manage
cooperative records, and monitor system performance. Farmers can explore
agricultural data, receive alerts, and use voice-based input to simplify interactions.
The integration of AI-driven speech and translation modules ensures inclusivity for
users with limited digital literacy.
AgriSphere not only promotes transparency and efficiency in agricultural processes
but also bridges the communication gap between the government and farmers. It
enables farmers to make informed decisions, enhances productivity, and contributes
toward sustainable agriculture. The platform’s modular design ensures scalability,
allowing future integration of IoT devices, crop health monitoring, and predictive
analytics. In summary, AgriSphere serves as a comprehensive digital assistant for the
farming community, fostering innovation, accessibility, and empowerment in the
agri-tech ecosystem.

DEPARTMENT OF CSE RGUKT

7

Chapter-1
Introduction
1.1 Overview
Agriculture is the backbone of many economies, providing food security,
employment, and raw materials for various industries. However, farmers,
particularly in developing regions, face numerous challenges such as unpredictable
weather, limited access to government schemes, fluctuating market prices, and a lack
of timely information. With the advent of modern technologies like Artificial
Intelligence (AI), Internet of Things (IoT), and Cloud Computing, these challenges
can be effectively mitigated through digital solutions.
The AgriSphere platform has been developed as an all-in-one web application to
assist farmers by providing real-time access to agricultural data, weather
information, and government initiatives. This system bridges the gap between
traditional farming practices and digital agriculture by integrating speech,
translation, and data visualization capabilities into a single interactive interface.

AgriSphere enables farmers to:
•
•
•
•
•

Obtain accurate weather forecasts for their region.
Get updates about government schemes and subsidies.
Track market prices (mandi data) in real-time.
Maintain cooperative and financial records digitally.
Communicate with the system using voice in native languages.

The goal of AgriSphere is to simplify the digital experience for farmers, especially
those with limited technical literacy, through natural voice interaction, multilanguage support, and AI-powered insights.

DEPARTMENT OF CSE RGUKT

8

1.2 Problem Background
Agriculture in India faces numerous problems due to information gaps and lack of
technology adoption. Farmers often depend on outdated or word-of-mouth
information regarding weather, market prices, or schemes. This leads to uninformed
decisions such as incorrect crop selection, mistimed sowing, or missed subsidy
opportunities.
Major Issues Identified:
1. Information Fragmentation:
Weather, mandi prices, and scheme details are available on separate portals,
making navigation cumbersome.
2. Language Barriers:
Most data is available in English, which becomes difficult for rural farmers to
understand.
3. Limited Awareness:
Farmers are often unaware of government welfare or subsidy schemes that
could benefit them.
4. Manual Record Keeping:
Traditional methods of storing data lead to inefficiency and data loss.
5. Poor Digital Literacy:
Farmers struggle with complex app interfaces and prefer natural voice-based
interactions.
AgriSphere addresses these issues through a centralized, voice-assisted, multilingual
platform that merges all necessary agricultural data into one place.

1.3 Project Motivation
The motivation behind the project arises from observing the communication and
information gaps between government institutions and rural farmers. Many
government programs remain underutilized due to limited awareness and
accessibility barriers.

DEPARTMENT OF CSE RGUKT

9
Our team envisioned a holistic agricultural ecosystem where:
•
•
•
•

Farmers could talk to the system instead of typing.
Data is delivered instantly and accurately.
The interface is as simple as possible.
The system evolves to include predictive analytics and AI insights in the
future.

Fig.1.1: Bar Graph showing number of publication per year
Agricultural industry is making considerable progress in the context of the
implementation of digital technologies, but the pace is still slow as compared to
other domains such as healthcare, manufacturing, mining, automotive, energy, etc.

1.4 Objectives of the Project
The main objectives of the AgriSphere system are as follows:
1. To develop a centralized digital platform that integrates agricultural data,
weather, and government schemes.
2. To implement voice-based interaction using Google Speech Recognition and
Translation APIs to make the system accessible to all.
3. To provide real-time weather forecasting using OpenWeatherMap APIs and
geolocation data.
4. To design a user-friendly interface using React.js for ease of navigation and
accessibility.
5. To ensure secure and scalable data storage through Firebase Authentication
and Firestore Database.
6. To create separate roles for users and administrators, maintaining data control
and integrity.

DEPARTMENT OF CSE RGUKT

10
7. To empower farmers by making digital resources accessible in their local
language.
8. To make the platform scalable for future features like soil testing, AI crop
recommendation, and IoT sensor integration.

Objective

Technology Used

Real-time Weather Data

OpenWeatherMap API

Voice Interaction

Google Speech API

Language Translation

Google Translate API

Authentication & Database

Firebase

UI Development

React.js

Admin Management

Firebase Auth Role-based Access

1.5 Scope of the Project
The scope of AgriSphere covers multiple functionalities, targeting both farmers and
administrators, and addressing the information and accessibility challenges in the
agriculture sector.
Functional Scope
• Farmers’ Dashboard: Displays weather, mandi prices, and schemes.
• Weather Module: Provides current and next 7-day forecasts based on
location.
• Mandi Prices Module: Displays real-time commodity rates for major
districts.
• Government Schemes Module: Lists welfare schemes with eligibility and
benefits.
• Voice Interaction: Farmers can use a mic to input or request data.
• Language Toggle: Content can be viewed in Telugu or English.
• Admin Access: Admin can add, modify, or delete schemes.
Non-Functional Scope
• Responsive design for mobile and desktop users.
• Fast and secure Firebase backend.
• Automatic translation for non-native speakers.
DEPARTMENT OF CSE RGUKT

11
• Error handling for speech and network failures.
• Scalable for adding new modules in the future.

1.6 Significance of the Project
The AgriSphere platform is a significant step towards rural digitization and
inclusive technology. It ensures that every farmer, regardless of education or
technical skill, can benefit from technology.
Key Significance:
• Empowerment of Farmers: Provides information in native languages with
voice assistance.
• Bridging the Digital Divide: Makes digital agriculture accessible even in
remote regions.
• Efficiency in Decision-Making: Real-time data enables better farming
practices.
• Support for Government Initiatives: Helps achieve “Digital India” and
“Smart Agriculture” visions.
• Data Transparency: Farmers can make informed decisions on pricing and
crop selection.
• Ease of Communication: Reduces dependency on intermediaries or manual
data sources.

1.7 Methodology
The development methodology follows the Agile Model, where iterative
development cycles were carried out. Each module — such as weather, mandi prices,
schemes, and authentication — was designed, implemented, and tested individually
before integration.
Phases:
1. Requirement Analysis – Identifying user needs and data sources.
2. System Design – Creating architecture, database schema, and API
workflows.
3. Module Development – Implementing frontend and backend features.
4. Integration & Testing – Connecting modules and verifying performance.
DEPARTMENT OF CSE RGUKT

12
5. Deployment – Hosting on Firebase for real-time access.
6. Maintenance & Feedback – Continuous updates based on farmer input.

DEPARTMENT OF CSE RGUKT

13

Chapter-2
Literature Survey
2.1 Review of Related Work
This section presents a detailed review of research studies and literature relevant to
AgriSphere. These works provide insights into the integration of IoT, cloud
computing, artificial intelligence, and language technologies in agriculture. They
also emphasize the importance of information accessibility for farmers. Each
reviewed study contributes to the conceptual foundation and future development
scope of AgriSphere.

2.1.1 Multilingual Chatbots for Agricultural Assistance
Authors: Kumar & Patel (2021)
Publication: Journal of Natural Language Processing and Applications
Summary:
Kumar and Patel proposed a multilingual chatbot system tailored for agricultural
information dissemination. The chatbot leverages Natural Language Processing
(NLP) to understand user queries in various regional Indian languages such as Hindi,
Tamil, Telugu, and Marathi. The system integrates Google’s Translation API and a
knowledge base containing agricultural best practices, pest control methods, and
crop-specific guidelines.
The module was designed to assist farmers who often face difficulties understanding
English-language resources. Using speech-to-text and text-to-speech modules, it
enabled voice-based interaction, making it accessible even for illiterate or semiliterate users.
Key Findings:
•
•

Multilingual NLP can bridge the communication gap between technology
and rural farmers.
Voice-enabled interfaces increase user engagement and accessibility.

Relevance to AgriSphere:
This research reinforces AgriSphere’s concept of integrating voice assistance and
translation features to ensure inclusivity for farmers across linguistic backgrounds.
By incorporating similar NLP-driven modules, AgriSphere can improve user
interaction, enabling farmers to ask queries in their native language and receive realDEPARTMENT OF CSE RGUKT

14
time, region-specific guidance. This approach supports the vision of digital
inclusiveness in agriculture.

2.1.2 Crop Disease Diagnosis Using Artificial Intelligence and Image
Processing
Authors: Mehta, R., & Banerjee, S. (2021)
Publication: Journal of Agricultural Informatics and Intelligent Systems
Summary:
This research focuses on the use of artificial intelligence (AI) and image processing
techniques to diagnose plant diseases automatically by analyzing images of crop
leaves. The study proposed a system that captures leaf images using mobile or IoTconnected cameras and applies Convolutional Neural Networks (CNNs) to detect
early signs of diseases such as blight, rust, and mildew.
The workflow of the system included several stages — image acquisition, preprocessing, featwure extraction, classification, and result prediction. Image preprocessing involved filtering and contrast enhancement to remove noise and
highlight disease spots. Feature extraction captured color, texture, and shape patterns
that differentiate healthy and infected leaves. The CNN model was trained using a
dataset containing thousands of labeled leaf images across multiple crops such as
rice, maize, tomato, and cotton.
The researchers achieved over 95% accuracy in identifying disease categories and
suggested that such AI models could be integrated into mobile applications to help
farmers identify diseases in real time without needing expert intervention.
Key Findings:
• Image-based AI systems can accurately identify crop diseases at an early
stage.
• CNN-based models outperform traditional manual inspection methods.
• Cloud or mobile integration enables real-time, on-field diagnosis.
• Early disease detection helps reduce crop loss and improve yield.

Relevance to AgriSphere:
This research is highly relevant to the future expansion of AgriSphere. A “Crop
Diagnosis” module can be introduced, allowing farmers to upload photos of affected
plants and receive instant disease detection and recommended remedies.

DEPARTMENT OF CSE RGUKT

15
2.1.3 Awareness of Government Schemes in Telangana
Authors: P. Ashwini (2022)
Publication: CAB International Digital Library – Journal of Agricultural Extension
Summary:
This study assessed farmers’ awareness of digital agricultural schemes across
multiple districts in Telangana. It focused on programs aimed at improving
productivity, income, and access to government subsidies. The research identified
the key role of digital platforms in spreading information about agricultural schemes
and analyzed factors influencing awareness, including literacy, access to
smartphones, and participation in extension programs.
Key Findings:
• Farmers with access to smartphones and digital platforms had higher
awareness of schemes.
• Awareness varied significantly across districts depending on local outreach
efforts.
• Socio-economic factors, such as education and farm size, influenced
awareness levels.
Relevance to AgriSphere:
The study justifies integrating a dedicated Telangana schemes module within
AgriSphere. By providing scheme information in regional languages, the platform
can bridge the information gap and improve participation among local farmers.
Conclusion of Review
The reviewed studies collectively demonstrate how modern technologies —
including IoT, NLP, machine learning, and cloud computing — can be integrated
into agriculture to create smarter, data-driven, and more accessible solutions.
AgriSphere builds upon these foundations by combining information accessibility,
multilingual support, and future scope for intelligent analytics, positioning itself as a
next-generation digital assistant for the agricultural ecosystem.

DEPARTMENT OF CSE RGUKT

16

Chapter-3
Existing Solutions
2.1 Introduction
The purpose of this chapter is to review the existing agricultural information
systems, mobile and web-based applications, and technological frameworks that aim
to assist farmers in making informed decisions. A detailed literature survey provides
the foundation for understanding existing approaches, their limitations, and the areas
where AgriSphere provides enhancements.
The research includes studies and projects that integrate weather forecasting, market
price analysis, government scheme information, and the use of artificial intelligence
(AI) and natural language processing (NLP) in agricultural contexts. The
comparative analysis helps to highlight the technological gap addressed by
AgriSphere.

2.2 Review of Existing Systems
2.2.1 Kisan Suvidha App (Government of India)
Overview:
Kisan Suvidha is a government-launched mobile application that provides weather
information, market prices, and pest alerts. It aims to empower farmers with timely
and location-specific information.

Features:
•
•
•
•

Real-time weather updates and warnings.
Market price trends for selected crops.
Information on pesticide usage and advisories.
Available in 12 regional languages.

DEPARTMENT OF CSE RGUKT

17
Limitations:
•
•
•
•

No integrated voice command feature.
Limited interactivity; text-based interface only.
Data not updated consistently for all regions.
Lacks support for automatic translation or AI-based insights.

2.2.2 eNAM (National Agriculture Market)
Overview:
The Electronic National Agriculture Market (eNAM) is an online trading platform
for agricultural commodities in India. It connects existing Agricultural Produce
Market Committee (APMC) mandis to create a unified national market for
agricultural commodities.
Features:
• Online trading of commodities.
• Unified licensing for traders.
• Transparent price discovery mechanism.
Limitations:
•
•
•
•

Focuses only on trading, not on information dissemination.
Complex interface unsuitable for small-scale farmers.
Requires high-speed internet connectivity.
Does not offer local language or voice-based access.

2.2.3 Digital India Agriculture Platform
Overview:
A central initiative by the Government of India under the Digital India mission to
promote digital solutions in agriculture.
Features:
• Uses AI, IoT, and GIS technologies.
• Collects farm-level data for analytics.
• Connects various databases for centralized decision-making.
Limitations:
• Still under development in many states.
• Data access restricted to officials and researchers.
DEPARTMENT OF CSE RGUKT

18
• Does not offer personalized data for individual farmers.

2.2.5 AI-Based Agricultural Systems (Research Models)
Overview:
Recent academic research has focused on the integration of AI and Machine
Learning (ML) to predict crop yields, detect diseases, and analyze soil health.

Examples:
• Predictive crop modeling using TensorFlow.
• Voice-based chatbot systems for farm query resolution.
• Smart irrigation systems using IoT sensors.
Limitations:
• High cost and technical complexity.
• Often limited to research or pilot-level implementations.
• Lack of multilingual, large-scale deployment.

2.3 Proposed System
Introduction
The proposed system, AgriSphere, is an intelligent, bilingual (Telugu & English)
web application that integrates agricultural, financial, and informational services for
farmers into a single, unified platform.
Unlike existing fragmented applications, AgriSphere focuses on accessibility,
automation, and usability, leveraging cloud services and voice-based interaction to
ensure that even rural users with limited digital literacy can benefit from modern
technology.

DEPARTMENT OF CSE RGUKT

19

Key Features of the Proposed System
S.No

Feature

Description

1

Voice Assistant
Integration

Farmers can interact using Telugu or English speech
input for ease of use. Speech recognition and textto-speech are enabled via Google Speech APIs.

2

Bilingual Interface

Every module, including government schemes,
weather, and mandi prices, is accessible in both
Telugu and English.

3

Displays updated central and state-level schemes
Government Schemes
with detailed eligibility, benefits, and application
Portal
links.

4

Weather Forecasting

5

Mandi (Market) Price Fetches dynamic crop price data from government
Display
APIs and displays region-wise mandi rates.

6

Finance Ledger and
Cooperative Sales

Enables farmers to track daily sales, cooperative
transactions, and income–expense analysis.

7

Firebase-Based
Authentication

Secure login, user role management
(Admin/Farmer), and data storage handled via
Firebase Authentication and Firestore.

8

Admin Control

Administrators can add, modify, or delete
government schemes and monitor database records.

9

Offline Data Sync
(Future
Enhancement)

Future version will cache essential data (weather,
schemes) for offline accessibility in rural areas.

Real-time weather and temperature updates for local
regions using OpenWeather API.

2.4 Advantages of the Proposed System
1. Simple Access and Voice Support
The application provides easy accessibility by letting farmers use Telugu voice
commands and receive native language feedback. This focus on voice interaction
and a simple, user-friendly UI helps bridge the digital gap for all farmers.

2. All-in-One Information Hub
AgriSphere integrates all critical data in one place. It combines real-time Mandi
prices, weather forecasts, government schemes, and a personal financial ledger. This
DEPARTMENT OF CSE RGUKT

20
integration ensures farmers have the complete picture needed for smarter decisionmaking.

3. Reliability and Low Costs
Built on the Firebase cloud, the system is highly reliable with automatic data backup
and secure storage. The serverless architecture ensures low maintenance needs and
provides real-time updates for crucial information like market prices and schemes.

2.5 Comparative Analysis of Existing Systems
The following table summarizes key features and limitations of the reviewed
systems:
Weather
Info

Market
Prices

Scheme

Voice Language
Support Options

AI/ML

Limitations

Kisan
Suvidha

✔️

✔️

❌

❌

12

❌

Text-only,
limited
interactivity

eNAM

❌

✔️

❌

❌

English
only

❌

Complex
trading
interface

Digital India
✔️
Agriculture

❌

✔️

❌

English

✔️

Limited
farmer access

Telugu,
English

Partial
(NLP,
Translati
on)

Unified,
voice-based
multilingual
system

System

AgriSphere
✔️
(Proposed)

✔️

✔️

✔️

Table 2.1: Comparison of Existing Agricultural Systems

2.6 Expected Outcome
• Farmers gain autonomy in managing agricultural operations digitally.
• The system ensures information transparency and data accuracy.
• Voice-based and multilingual support encourages digital inclusion among
non-technical users.
• AgriSphere acts as a bridge between technology and agriculture, fostering
smart farming practices.

DEPARTMENT OF CSE RGUKT

21

Chapter-4
System Analysis
3.1 Problem Definition
Agriculture is the backbone of the Indian economy, employing more than half of the
population and contributing significantly to the nation’s GDP. However, despite
technological advancements in various sectors, a large portion of Indian farmers—
particularly in rural and semi-rural regions—still face challenges due to the lack of
access to timely and accurate information. These challenges include unpredictable
weather patterns, unstable market prices, limited awareness of government welfare
schemes, and inefficient management of their farm-related finances.
The majority of existing digital platforms for farmers focus on single domains—such
as weather forecasts or market prices—but fail to provide an integrated and localized
solution. Furthermore, these applications often operate in English, creating a
language barrier for farmers in states like Andhra Pradesh and Telangana, where
Telugu is predominantly spoken. The absence of bilingual interfaces and real-time
voice-based interaction restricts accessibility to educated users, leaving rural farmers
digitally excluded.
The problem, therefore, is the absence of a unified, bilingual (English and Telugu)
smart assistant that provides farmers with all essential agricultural data—such as
mandi prices, government schemes, cooperative sales updates, financial ledgers, and
weather forecasts—through an easy-to-use voice-assisted web application.
AgriSphere aims to bridge this gap by creating an interactive, real-time platform that
integrates essential agricultural tools with language translation and speech
technologies to support even those with limited literacy or technological familiarity.

3.2 System Requirements
System analysis plays a crucial role in defining the structure and behavior of the
system before moving toward implementation. It involves studying both the
functional and non-functional aspects that define the user expectations and system
behavior. This section outlines the requirements that ensure the application meets its
intended goals efficiently and effectively.

DEPARTMENT OF CSE RGUKT

22

3.2.1 Functional Requirements
The AgriSphere platform is designed to perform several key functions for two types
of users: farmers and administrators. Farmers use the system to interact with
agricultural data, while administrators manage the backend and verify content such
as government schemes.
The system’s primary functional requirements include:
User Registration and Authentication:
Each user (farmer or admin) must register and log in using Firebase Authentication.
The system ensures secure access with email and password validation. Upon
successful login, the user is redirected to their personalized dashboard.
Weather Forecasting:
The system retrieves and displays current and 5-day weather forecasts using the
OpenWeatherMap API. It automatically detects the user’s geographical location and
provides results in both English and Telugu, along with audio narration for easy
understanding.
Mandi Price Integration:
Farmers can check the latest market (mandi) prices for their crops based on their
state or district. The system connects to live government APIs to fetch these prices
and displays them in both textual and audible formats.
Government Schemes Portal:
A bilingual repository of government schemes is available. Admins can add or
modify schemes using a dynamic form, while farmers can access, listen to, and
translate them in their preferred language.
Cooperative Sales and Finance Ledger:
Farmers can collaboratively log their crop sales and view their income, expenses,
and net profit or loss in a simple ledger format. This helps track financial
performance over time without manual bookkeeping.
Voice Recognition and Speech Assistance:
Using Google Speech APIs, the system supports both speech-to-text (for input fields)
and text-to-speech (for reading output). This feature is especially valuable for
illiterate users.
Admin Panel:
Admins have elevated privileges to manage content, verify schemes, moderate user
inputs, and maintain the database integrity.
Together, these functionalities create a holistic ecosystem for farmers to access all
necessary information in one place, reducing dependency on multiple apps.
DEPARTMENT OF CSE RGUKT

23

3.2.2 Non-Functional Requirements
Beyond its core features, AgriSphere’s performance, scalability, and reliability are
critical. Non-functional requirements ensure the system remains efficient and userfriendly in all environments.
Usability:
The system uses a clean, visually rich interface optimized for both mobile and
desktop devices. The use of icons and voice cues ensures accessibility even for lowliteracy users.
Reliability:
The backend runs entirely on Firebase Cloud Infrastructure, providing high data
reliability and automatic synchronization. Any data entered by a farmer is stored
securely and accessible across devices.
Performance:
API calls and database queries are optimized for fast response times, ensuring
minimal latency during user interactions, even on low-speed networks common in
rural areas.
Security:
User authentication is enforced through Firebase, and all communication is
encrypted via HTTPS. Role-based access ensures that administrative controls are
restricted to authorized personnel only.
Maintainability:
Built using modular React components and Firebase’s NoSQL schema, the project is
highly maintainable. Updates to one feature do not affect other modules, enabling
long-term scalability.

3.2.3 Software Requirements
Software requirements describe all the necessary software components, tools, APIs,
frameworks, and services needed for the design, development, testing, and
deployment of the AgriSphere application. These software elements form the logical
and operational foundation on which the system runs.
The software stack is carefully chosen to ensure that the application is lightweight,
cloud-based, cross-platform, and maintainable while also enabling real-time
communication between multiple modules such as weather forecasting, government
scheme management, and the financial ledger.

DEPARTMENT OF CSE RGUKT

24
3.2.3.1. Operating System
The development and deployment of AgriSphere can be performed on any modern
operating system. However, the project was designed and tested primarily on
Windows 10 and Ubuntu 22.04.
• Windows 10: Provides a stable environment for frontend development and
compatibility with Firebase CLI and Node.js.
• Ubuntu (Linux): Offers high performance, open-source libraries, and
efficient resource management for backend and API operations.
These systems provide a reliable base for running Node.js, Firebase tools, and React
development servers.

3.2.3.2 Frontend Development Environment
The frontend serves as the visible interface between the farmer and the application.
It was developed using React.js — a widely used JavaScript library for building
fast, interactive, and reusable UI components.
Tools and Libraries Used:
•

React.js:
Enables component-based architecture, resulting in modular, reusable, and
easily maintainable UI sections (like scheme cards, weather tiles, and
dashboards).

•

TypeScript:
Ensures type safety, prevents runtime errors, and improves code readability
for long-term maintainability.

•

Tailwind CSS:
A utility-first CSS framework for designing responsive and visually
consistent layouts that scale across devices — from desktop screens to lowend mobile devices.

•

Lucide React Icons:
Provides lightweight SVG icons used in menus, cards, and headers to make
the UI visually appealing and intuitive.

3.2.3.3. Backend Development and Cloud Integration
AgriSphere is built using a serverless architecture provided by Google Firebase,
eliminating the need for manual server deployment. The backend logic, database
management, and hosting are handled entirely through Firebase services.

DEPARTMENT OF CSE RGUKT

25
Firebase Components Used:
•

Firebase Authentication:
Manages user sign-up, login, and session handling securely. It supports
email-password authentication and can be extended to phone or Googlebased login in the future.

•

Firebase Firestore (Database):
A real-time, NoSQL cloud database that stores data in JSON-like documents.
It allows instant synchronization of changes (for example, when a new
scheme or transaction is added, all users see the update in real time).

•

Firebase Storage:
Used for storing and retrieving uploaded images, such as scheme banners,
user photos, or document scans.

•

Firebase Hosting:
Offers fast and secure hosting for the React application. It automatically
provisions SSL certificates, ensuring data security over HTTPS.

•

Firebase Cloud Functions:
Allows small server-side scripts to execute on-demand — for example, autogenerating summaries, validating input data, or sending notifications to users.

3.2.3.4. Database System
AgriSphere uses Firebase Firestore as its primary database system. It is a cloudbased, NoSQL database that stores data as key-value pairs in collections and
documents.
Firestore was chosen for its following advantages:
• Scalability: Automatically scales based on the number of users.
• Real-time updates: Enables instant data reflection in all connected devices.
• Offline support: Farmers in remote areas can still access cached data, which
automatically syncs once the internet connection is restored.
• Security Rules: Each user can access only their data, managed through
Firebase’s inbuilt rule engine.
3.2.3.5 API Integrations
The system uses multiple third-party APIs to gather real-time information.
•

OpenWeatherMap API:
Provides 5-day weather forecasts and real-time climate conditions

DEPARTMENT OF CSE RGUKT

26
(temperature, humidity, wind speed, etc.) for the farmer’s current or chosen
location.
•

Data.gov.in API (Mandi Prices):
Fetches the daily market prices for major crops from Indian agricultural
markets, ensuring authenticity.

•

Google Cloud Speech API:
Converts spoken Telugu or English input into text (Speech-to-Text) and vice
versa (Text-to-Speech). This enables full voice interaction throughout the
system.

•

Google Translate API:
Enables dynamic translation of text fields from English to Telugu and vice
versa, supporting bilingual accessibility.

3.2.3.6 Development Tools and Utilities
•

Visual Studio Code (VS Code):
Used as the primary code editor due to its integrated terminal, debugging
tools, and React-specific extensions.

•

Node.js and npm:
Provides the runtime environment and package manager for installing
dependencies and running the React development server.

•

Git and GitHub:
Used for version control and team collaboration, ensuring that every code
change is tracked and maintained.

•

Browser Developer Tools:
Chrome and Edge DevTools are used to test responsiveness, debug network
requests, and ensure accessibility compliance.

3.2.3.7 Hosting and Deployment
AgriSphere is hosted on Firebase Hosting, which offers:
• SSL-secured URLs (HTTPS)
• Fast content delivery via CDN (Content Delivery Network)
• Automatic deployment using Firebase CLI
• Simple rollback in case of update failures
This eliminates the need for external hosting providers, ensuring cost efficiency and
reliability.
DEPARTMENT OF CSE RGUKT

27

3.2.4 Hardware Requirements
Hardware requirements define the physical infrastructure needed to develop, test,
and run the AgriSphere application efficiently.
Since this project is web-based and hosted in the cloud, the hardware needs are
minimal compared to traditional server-based applications.
However, sufficient processing power, memory, and network connectivity are
essential for ensuring smooth performance and testing during development.

3.2.4.1 Development Environment Requirements
During the development phase, the system must be tested locally before deployment.
The development machine should ideally have:
• Processor: Intel Core i5 (or equivalent AMD Ryzen 5)
Justification: The React development server and Firebase emulator require
moderate processing capabilities to compile and render front-end components
efficiently.
• RAM: Minimum 8 GB
Justification: To support simultaneous execution of the React build process,
database synchronization, and multiple API calls without freezing.
• Storage: 256 GB SSD
Justification: Fast storage helps in quick file compilation, dependency
installation, and caching of API results.
• Display: 1080p Full HD Monitor
For clear visibility during design, UI testing, and debugging of interface
layouts.
• Internet Connectivity:
Stable connection (at least 1 Mbps) required for real-time API data fetch and
Firebase sync during development.
📍 Figure Placeholder: Developer Workstation Setup Diagram

3.2.4.2. Deployment Environment Requirements
The deployment environment (Firebase cloud) does not require a physical server.
Instead, all operations occur on Google’s cloud infrastructure. However, end users
(farmers) and administrators interact through their own devices.
Minimum user-side requirements:
• Device Type: Smartphone, Tablet, or PC

DEPARTMENT OF CSE RGUKT

28
• Operating System: Android 9.0 or higher, or any desktop OS with
Chrome/Edge browser
• RAM: 2 GB minimum for mobile devices
• Internet Connection: 512 Kbps and above (for API-based data fetching)
• Microphone Access: Required for voice input functionality
• Speaker Access: Required for text-to-speech voice output
Even low-end Android phones are capable of accessing AgriSphere, making it
feasible for widespread rural adoption.

3.2.4.3 Network Requirements
The system heavily depends on network connectivity for real-time data
synchronization.
To ensure reliable communication, the following parameters are considered:
• Latency: Must be below 200 ms for a smooth voice interaction experience.
• Bandwidth: A minimum of 500 KB per transaction is needed for weather
data and audio playback.
• Server Uptime: Firebase guarantees a 99.9% uptime SLA, ensuring
continuous availability.
📍 Figure Placeholder: Cloud Connectivity and Network Diagram

3.2.4.4 Peripheral Requirements
Certain hardware peripherals enhance the usability and accessibility of the
application:
• Microphone: Essential for speech recognition and voice-based data entry.
• Speaker or Earphones: Required for audio output of translated or weatherrelated data.
• Touchscreen Input: Beneficial for older farmers using mobile devices to
interact easily with large buttons.
• Printer (Optional): For generating printed reports of the farmer’s financial
ledger if needed.

DEPARTMENT OF CSE RGUKT

29

3.3 Feasibility Study
A feasibility study is the process of evaluating the practicality and success potential
of a system before its actual development. It helps determine whether the proposed
project is viable in terms of technology, cost, resources, and user adaptability.
In the case of AgriSphere, the feasibility study was conducted to ensure that the
project could be implemented effectively using the available tools and resources
while meeting the needs of farmers and administrators. The study focuses on three
main dimensions — Technical Feasibility, Economic Feasibility, and Operational
Feasibility.
1. Technical Feasibility (Can we build it?)
• Result: Highly Feasible
• Justification: The system uses a robust, modern, and compatible stack:
React.js (Frontend) and Firebase (Backend/Cloud Services), which are all
open-source or offer free tiers. This serverless architecture eliminates the
need for physical servers, ensures automatic scalability (handling growth
from 100 to 10,000 users), provides real-time synchronization via Firestore,
and is secured by built-in Firebase Authentication and HTTPS. All core APIs
integrate seamlessly, and the cross-platform design allows access from any
browser/device.
2. Economic Feasibility (Is it affordable?)
• Result: Viable and Cost-Effective
• Justification: The development cost is minimal due to the reliance on opensource technologies (React, VS Code, Node.js) and the generous free tier of
Firebase for hosting and initial database storage. Ongoing operational costs
are low, as there is no physical server maintenance or licensing fees. The
system offers a high Return on Investment (ROI) by increasing farmer
productivity, reducing financial losses from poor decisions, and empowering
rural communities with crucial information.
3. Operational Feasibility (Will it work for the users?)
• Result: Sustainable and User-Acceptable
• Justification: The system is operationally effective because it is designed
specifically for non-technical, rural users. The bilingual interface
(Telugu/English), combined with voice-enabled interaction, ensures easy
navigation for semi-literate users. The key challenge of limited rural internet
is mitigated by Firebase's offline caching support. Minimal training is
DEPARTMENT OF CSE RGUKT

30
required, making the system adoption and long-term maintenance highly
sustainable.

3.4 System Objectives and Constraints
3.4.1 System Objectives
The primary goal of AgriSphere is to create a comprehensive, intelligent, and
bilingual agricultural platform that assists farmers with information, management,
and decision-making support using modern web technologies.
The objectives are framed keeping in view the challenges faced by rural farmers,
especially those from Telugu-speaking regions, who often struggle with digital
literacy and lack access to reliable, real-time data.
The core objectives are:

1. Information Centralization and Accuracy
• To integrate all vital agricultural data—mandi prices, government
schemes, cooperative sales, and real-time weather forecasts—into a single
web application.
• To ensure Data Accuracy and Real-Time Synchronization by using
verified third-party APIs and the Firebase real-time database (Firestore).

2. Accessibility and Inclusivity (Language & Interaction)
• To provide a Bilingual User Interface (Telugu and English) using the
Google Translate API, ensuring all content is understandable by users with
limited English literacy.
• To enable Voice-Enabled Interaction using Google Speech Recognition and
Text-to-Speech (TTS) functionalities, making the platform fully usable for
illiterate or semi-literate farmers.

3. Decision Support and Management
• To offer Real-Time Weather Forecasting and Alerts (via OpenWeatherMap
API) to help farmers plan activities and minimize losses.
• To provide transparent Mandi Prices and Market Updates to empower
farmers in negotiating better prices.

DEPARTMENT OF CSE RGUKT

31
• To facilitate Cooperative Sales and Financial Ledger Management,
enabling transparent tracking of income, expenses, and profit for both
individual farmers and cooperatives.
• To maintain a Government Scheme Repository with easy-to-access,
updated details on welfare schemes.

4. Technical Reliability and Future Readiness
• To utilize Cloud-Based Accessibility and Scalability via Firebase
infrastructure, ensuring 24/7 uptime, universal access, and the ability to
easily integrate future modules (a future-ready digital ecosystem).
• To ensure strong Admin Management and Security through Firebase's rolebased authentication, logging, and data governance.

3.4.2 System Constraints
Despite its advanced features, AgriSphere faces several constraints and
dependencies due to practical, environmental, and technical factors. These
constraints are acknowledged to plan for future improvements and ensure system
reliability.
1. Technical and Connectivity Limitations
The system faces challenges related to Internet Connectivity in rural areas, where
low-speed networks can delay real-time features, despite Firebase's offline caching.
It also has Hardware and Device Constraints, as essential voice features require
functional microphones and speakers that may not be available on all low-end
devices. Furthermore, Browser Compatibility is focused on modern browsers,
limiting functionality on older versions.
2. External Service Dependencies
AgriSphere's performance and accuracy are constrained by reliance on Third-Party
APIs (for weather, translation, and market data). This presents risks, including
potential restricted access if free-tier usage limits are exceeded, requiring premium
subscriptions for large-scale operations. Additionally, the system is exposed to the
reliability of external sources, facing Limited Local Data Sources if government or
weather providers fail to promptly update regional information.

DEPARTMENT OF CSE RGUKT

32
3. Usability and Maintenance Risks
The multilingual features face Language and Accent Constraints, as regional
dialect variations may lead to misinterpretation by the Google Speech API, requiring
continuous fine-tuning. Maintenance and API Key Management pose a periodic
risk, as key expiration or quota abuse can temporarily disrupt core services like voice
recognition or weather fetching.
4. Security and Operational Scaling
While Firebase offers security, the system must maintain strict adherence to Security
and Privacy Constraints concerning sensitive data stored in the cloud, requiring
proper database rules and compliance with emerging privacy laws. Finally, Human
Resource and Training Limitations mean that while the app is intuitive, large-scale
adoption may still necessitate periodic training sessions for first-time users.

3.5 Summary
This chapter analyzed AgriSphere from an engineering perspective, focusing on
problem definition, system requirements, feasibility, and design objectives.
It established that AgriSphere is both feasible and sustainable, combining a
multilingual interface, voice support, and real-time cloud integration to address core
agricultural challenges.
The system objectives highlighted how the platform empowers farmers by providing
timely, accessible information, while the constraints identified current practical
limitations like network dependency and API restrictions.
Together, these insights form the foundation for the System Design Phase, where
these objectives are transformed into structured architectures, data flow models, and
UML diagrams.

DEPARTMENT OF CSE RGUKT

